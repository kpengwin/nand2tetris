=============
Class
=============

class Main {

}

---
(source_file
  (class_definition
    class_name: (identifier)
    (class_block)))

=============
Class with comment
=============

//main
class Main {

}

---
(source_file
  (single_line_comment)
  (class_definition
    class_name: (identifier)
    (class_block)))

=============
Class with doc/multi_line_comments
=============
/** Docstring comment */
/* Multi
   Line
   Comment */
class Main {

}

---
(source_file
  (doc_string_comment)
  (multi_line_comment)
  (class_definition
    class_name: (identifier)
    (class_block)))

=============
Class with static variables
=============

class Main {
  static int a, b;
}

---
(source_file
  (class_definition
    class_name: (identifier)
    (class_block
      (static_variable
        (type)
        var_name: (identifier)
        var_name: (identifier)
      ))))

=============
Class with method, array, array assignment
=============

class Main {
  field Array a;
  method void testMethod() {
    let a[3] = 2;
  }

}

---
(source_file
  (class_definition
    class_name: (identifier)
    (class_block
      (field_variable
        (type)
        var_name: (identifier)
      )
    (method_definition (type (identifier)) name: (identifier) (parameter_list)
      (statement_block
        (let_statement (array_element array_name: (identifier) (identifier)))
      )
    )
    )))


=============
Class with static and field variables
=============

class Main {
  static int a;
  field int b;

}

---
(source_file
  (class_definition
    class_name: (identifier)
    (class_block
      (static_variable
        (type)
        var_name: (identifier))
      (field_variable
        (type)
        var_name: (identifier))
      )))

=============
Class with constructor
=============

class Meta {

  constructor Meta new() {
    return this;
  }

}

---
(source_file
  (class_definition
    class_name: (identifier)
    (class_block
      (constructor_definition
        (type (identifier))
        name: (identifier) (parameter_list)
        (statement_block
          (return_statement (identifier))
        )
      )
    )))

=============
Class with method
=============

class Meta {

  method void testMethod() {
    return;
  }

}

---
(source_file
  (class_definition
    class_name: (identifier)
    (class_block
      (method_definition
        (type (identifier))
        name: (identifier) (parameter_list)
        (statement_block
          (return_statement)
        )
      )
    )))



=============
Class with function (var, let statements)
=============

class Meta {

  function int testFunc() {
    var int i;
    let i = 1;
    return i;
  }

}

---
(source_file
  (class_definition
    class_name: (identifier)
    (class_block
      (function_definition
        (type)
        name: (identifier) (parameter_list)
        (statement_block
          (variable_declaration (type) var_name: (identifier))
          (let_statement var_name: (identifier) (number))
          (return_statement (identifier))
        )
      )
    )))

=============
Class with function (var, let, do, while statements)
=============

class Meta {

  function int testFunc() {
    var int i;
    let i = 1;
    while ( i < 3 ) {
      do Math.increment(i);
    }
    return i;
  }

}

---
(source_file
  (class_definition
    class_name: (identifier)
    (class_block
      (function_definition
        (type)
        name: (identifier) (parameter_list)
        (statement_block
          (variable_declaration (type) var_name: (identifier))
          (let_statement var_name: (identifier) (number))
          (while_statement (dual_expression (identifier) (dual_operator) (number))
            (statement_block
              (do_statement (subroutine_call class_name: (identifier)
                                          function_name: (identifier)
                                          (argument_list (identifier)))))
          )
          (return_statement (identifier))
        )
      )
    )))

=============
Class with function (var, let, if statements)
=============

class Meta {

  function int testFunc() {
    var int i;
    let i = 1;
    if ( i < 3 ) {
      let i = i + 1;
    }
    return i;
  }

}

---
(source_file
  (class_definition
    class_name: (identifier)
    (class_block
      (function_definition
        (type)
        name: (identifier) (parameter_list)
        (statement_block
          (variable_declaration (type) var_name: (identifier))
          (let_statement var_name: (identifier) (number))
          (if_statement (dual_expression (identifier) (dual_operator) (number))
            (statement_block
              (let_statement var_name: (identifier) (dual_expression (identifier) (dual_operator) (number)))
            )
          )
          (return_statement (identifier))
        )
      )
    )))


=============
Class with function (var, let, if-else statements)
=============

class Meta {

  function int testFunc() {
    var int i;
    let i = 1;
    if ( i < 3 ) {
      let i = i + 3;
    } else {
      let i = 3;
    }
    return i;
  }

}

---
(source_file
  (class_definition
    class_name: (identifier)
    (class_block
      (function_definition
        (type)
        name: (identifier) (parameter_list)
        (statement_block
          (variable_declaration (type) var_name: (identifier))
          (let_statement var_name: (identifier) (number))
          (if_statement (dual_expression (identifier) (dual_operator) (number))
            (statement_block
              (let_statement var_name: (identifier) (dual_expression (identifier) (dual_operator) (number)))
            )
            (else_statement
              (statement_block
                (let_statement var_name: (identifier) (number)))
            )
          )
          (return_statement (identifier))
        )
      )
    )))






