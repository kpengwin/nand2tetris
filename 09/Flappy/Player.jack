/** The player class */

class Player {
   field int location;
   field int wingStatus;
   field int delta;

   constructor Player new() {
      let location = 4;
      let wingStatus = 0;
      let delta = 0;
      return this;
   }

   method int getLoc() {
      return location;
   }

   method int getBirdTop() {
      
   }

   method int drawSelf(int key) {
      var int continueGame;
      let continueGame = 1;
      do Utility.clearSquare(location);
      if (key = 0) {
         let delta = delta + 1;
      } else {
         let delta = delta - 1;
      }
      let location = (location + (32 * delta));
      // 246*32
      if ((location > (7872)) | location < 4) {
         let continueGame = 0;
      } else {
         if (delta > 0) {
            do drawWingUp(location);
         } else {
            do drawWingDown(location);
         }
         if (delta > 10) {
            let delta = 10;
         }
         if (delta < -10) {
            let delta = -10;
         }
      }

     return continueGame;
   }

   method void drawWingDown(int location) {
       var int memAddress; 
       let memAddress = 16384+location;
       // column 0
       do Memory.poke(memAddress, 8160);
       do Memory.poke(memAddress +32, 4380);
       do Memory.poke(memAddress +64, 5378);
       do Memory.poke(memAddress +96, 12545);
       do Memory.poke(memAddress +128, 19978);
       do Memory.poke(memAddress +160, 30724);
       do Memory.poke(memAddress +192, -31614);
       do Memory.poke(memAddress +224, 30786);
       do Memory.poke(memAddress +256, 8242);
       do Memory.poke(memAddress +288, 8142);
       return;
   }

   method void drawWingUp(int location) {
       var int memAddress; 
       let memAddress = 16384+location;
       // column 0
       do Memory.poke(memAddress, 8160);
       do Memory.poke(memAddress +32, 4380);
       do Memory.poke(memAddress +64, 5378);
       do Memory.poke(memAddress +96, 12558);
       do Memory.poke(memAddress +128, 19969);
       do Memory.poke(memAddress +160, 30723);
       do Memory.poke(memAddress +192, -31610);
       do Memory.poke(memAddress +224, 30840);
       do Memory.poke(memAddress +256, 8224);
       do Memory.poke(memAddress +288, 8128);
       return;
   }
}
